.TH "SockBroadcast" 3 "Mon Mar 26 2012" "Version 1.0" "NET" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SockBroadcast \- 
.PP
UDP boroadcast socket class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SockBroadcast\&.h>\fP
.PP
Inherits \fBSockUDP\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSockBroadcast\fP ()"
.br
.RI "\fIDefault broadcast socket constructor\&. \fP"
.ti -1c
.RI "\fBSockBroadcast\fP (uint16_t port, const char *iface=NULL)"
.br
.RI "\fIBroadcast socket constructor\&. \fP"
.ti -1c
.RI "\fBSockBroadcast\fP (uint16_t peerport, const char *peeraddr, uint16_t port, const char *iface=NULL, bool \fBattach\fP=true)"
.br
.RI "\fIBroadcast socket constructor\&. \fP"
.ti -1c
.RI "\fBSockBroadcast\fP (const \fBSockAddrInet\fP *localaddr)"
.br
.RI "\fIBroadcast socket constructor\&. \fP"
.ti -1c
.RI "\fBSockBroadcast\fP (const \fBSockAddrInet\fP *peeraddr, const \fBSockAddrInet\fP *localaddr, bool \fBattach\fP=true)"
.br
.RI "\fIBroadcast socket constructor\&. \fP"
.ti -1c
.RI "\fBSockBroadcast\fP (SOCKET sockfd)"
.br
.RI "\fIBroadcast socket constructor\&. \fP"
.ti -1c
.RI "virtual bool \fBopen\fP ()"
.br
.RI "\fIOpen socket connection\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
UDP boroadcast socket class\&. 

A socket that utilizes the network broadcast protocol for data transmission\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBSockBroadcast::SockBroadcast\fP ()"
.PP
Default broadcast socket constructor\&. Creates a broadcast socket object with default data values\&. 
.PP
References SockAddrFactory::create()\&.
.SS "\fBSockBroadcast::SockBroadcast\fP (uint16_tport, const char *iface = \fCNULL\fP)"
.PP
Broadcast socket constructor\&. Creates a broadcast socket object with the specified data values\&. 
.PP
\fBParameters:\fP
.RS 4
\fIport\fP an unsigned 16-bit integer specifying the port to bind the broadcast socket to\&. 
.br
\fIiface\fP a character string specifying the network interface to use for network transmission\&. When reading data with a broadcast socket, it is best not to set the interface unless you really know what you are doing\&. 
.RE
.PP

.PP
References SockInet::bind(), SockAddrInet::copy(), SockAddrFactory::create(), SockAddrInet::getSockAddr(), SockAddrInet::getSockAddrLen(), SockInet::localaddr_, and SockInet::sockfd_\&.
.SS "\fBSockBroadcast::SockBroadcast\fP (uint16_tpeerport, const char *peeraddr, uint16_tport, const char *iface = \fCNULL\fP, boolattach = \fCtrue\fP)"
.PP
Broadcast socket constructor\&. Creates a broadcast socket object with the specified data values, and connects it to a specified broadcast address\&. When a broadcast socket object is connected to an address, data can be sent to that address with calls to 'write' rather than calls to 'writeTo'\&. When a broadcast socket is connected it can only communicate with that address\&. Connecting a broadcast socket to a specific broadcast address can cause problems when attempting to read from that socket, because a number of systems read all broadcast data on '0\&.0\&.0\&.0' or '255\&.255\&.255\&.255', so if the broadcast socket is connected to a specific address it may never receive any information\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpeerport\fP a 16-bit integer specifying the port of the peer that the broadcast socket is to be connected/attached to\&. 
.br
\fIpeeraddr\fP a character string specifying the network broadcast address that the broadcast socket is connected/attached to\&. 
.br
\fIport\fP an unsigned 16-bit integer specifying the port to bind the broadcast socket to\&. 
.br
\fIiface\fP a character string specifying the network interface to use for network transmission\&. When reading data with a broadcast socket, it is best not to set the interface unless you really know what you are doing\&. 
.br
\fIattach\fP a boolean value specifying whether the broadcast socket is to be attached to the peer or connected to the peer\&. When the socket is attached, the broadcast socket object stores the peerport and peeraddr values and uses them to call 'sendto'\&. If the socket is connected, the broadcast socket object links the socket to the peer on the kernel level with a call to the 'connect' function and sends data with 'send'\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSockUDP::attached_\fP 
.PP
\fBSockUDP::write\fP 
.PP
\fBSockUDP::writeTo\fP 
.RE
.PP

.PP
References SockUDP::attached_, SockInet::bind(), SockUDP::connect(), SockUDP::connected_, SockAddrInet::copy(), SockAddrFactory::create(), SockAddrInet::getSockAddr(), SockAddrInet::getSockAddrLen(), SockInet::localaddr_, SockUDP::peeraddr_, and SockInet::sockfd_\&.
.SS "\fBSockBroadcast::SockBroadcast\fP (const \fBSockAddrInet\fP *localaddr)"
.PP
Broadcast socket constructor\&. Creates a broadcast socket object with the specified data values\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlocaladdr\fP a \fBSockAddrInet\fP object specifying the network information to be used when creating the broadcast socket\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSockAddrInet\fP 
.RE
.PP

.PP
References SockInet::bind(), SockAddrInet::copy(), SockAddrFactory::create(), SockAddrInet::getSockAddr(), SockAddrInet::getSockAddrLen(), SockInet::localaddr_, and SockInet::sockfd_\&.
.SS "\fBSockBroadcast::SockBroadcast\fP (const \fBSockAddrInet\fP *peeraddr, const \fBSockAddrInet\fP *localaddr, boolattach = \fCtrue\fP)"
.PP
Broadcast socket constructor\&. Creates a broadcast socket object with the specified data values, and connects it to a specified broadcast address\&. When a broadcast socket object is connected to an address, data can be sent to that address with calls to 'write' rather than calls to 'writeTo'\&. When a broadcast socket is connected it can only communicate with that address\&. Connecting a broadcast socket to a specific broadcast address can cause problems when attempting to read from that socket, because a number of systems read all broadcast data on '0\&.0\&.0\&.0' or '255\&.255\&.255\&.255', so if the broadcast socket is connected to a specific address it may never receive any information\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpeeraddr\fP a \fBSockAddrInet\fP object specifying the network information for the broadcast address to connect with when creating the broadcast socket\&. 
.br
\fIlocaladdr\fP a \fBSockAddrInet\fP object specifying the network information to be used when creating the broadcast socket\&. 
.br
\fIattach\fP a boolean value specifying whether the broadcast socket is to be attached to the peer or connected to the peer\&. When the socket is attached, the broadcast socket object stores the peerport and peeraddr values and uses them to call 'sendto'\&. If the socket is connected, the broadcast socket object links the socket to the peer on the kernel level with a call to the 'connect' function and sends data with 'send'\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSockUDP::attached_\fP 
.PP
\fBSockUDP::write\fP 
.PP
\fBSockUDP::writeTo\fP 
.RE
.PP

.PP
References SockUDP::attached_, SockInet::bind(), SockUDP::connect(), SockUDP::connected_, SockAddrInet::copy(), SockAddrFactory::create(), SockAddrInet::getSockAddr(), SockAddrInet::getSockAddrLen(), SockInet::localaddr_, SockUDP::peeraddr_, and SockInet::sockfd_\&.
.SS "\fBSockBroadcast::SockBroadcast\fP (SOCKETsockfd)"
.PP
Broadcast socket constructor\&. Creates a broadcast socket object from the specified data value\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsockfd\fP a handle to a previously created socket, to be used by the broadcast socket object\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "bool \fBSockBroadcast::open\fP ()\fC [virtual]\fP"
.PP
Open socket connection\&. \fBSee also:\fP
.RS 4
\fBSockInet::open\fP 
.RE
.PP

.PP
Implements \fBSockUDP\fP\&.
.PP
References SockAddrFactory::create()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for NET from the source code\&.
